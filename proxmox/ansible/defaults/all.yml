---

# path to proxmox api binary
# this default is used if not otherwise specified
pve_api: 'proxmox-api-go'
  
# ssh configuraiton to reach the VMs
# this is only an example, each line
# needs to enabled explicitly in group_vars
ansible_user: root
ssh_identity_file: '../ssh/id_rsa'
ssh_proxy_jump: proxyhost
ssh_include_config: '~/.ssh/config'

# allow sudo/wheel users to execute any command without password
ssh_passwordless_login: no
# example of adding additional users
# additional_users:
#   - name: user1
#     # comma seperated list of additional groups
#     additional_groups: 'wheel'
#     # mutually exclusive with reuse_ssh_key below
#     generate_ssh_key: yes
#     # mutually exclusive with generate_ssh_key above
#     # lets you reuse an existing ssh key
#     #ssh_key: '{{ ssh_identity_file }}'
#     # adds this key as authorized key
#     #authorized_key: '~/.ssh/id_rsa.pub'

# The cloud-init config template has manage_etc_hosts enabled by default.
# This will overwrite the state of /etc/hosts at each reboot. The default
# cloud-init configuratin resolves {{ ansible_hostname }} to 127.0.0.1.
# This is not desirable in all cases, since sometimes you want it to resolve
# the public IP (not localhost).
#
# There is an option cicustom which could be used to change this behavior
# at an earlier stage (e.g. with Terraform):
#  https://pve.proxmox.com/wiki/Cloud-Init_Support#_custom_cloud_init_configuration
#
# However, this parameter is not yet included in Telmate/terraform-provider-proxmox.
# Also, tests showed that reading the 'user' config as described in the above
# link did not really change the behavior of manage_etc_hosts (/etc/hosts was
# still modified at each reboot). Thus, this option will disable the line that
# resolves {{ ansible_hostname }} to 127.0.0.1 in all relevant files. The file
# /etc/hosts will still be overwritten at each reboot, but without the line resolving
# {{ ansible_hostname }} to 127.0.0.1. Choose 'yes' to enable this temporary fix.
cloud_init_disable_localhost_resolver: no
