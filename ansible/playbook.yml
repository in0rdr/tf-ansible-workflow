---

# Local tasks to generate ssh config
# Input/requires: './qemu-config.yml'
- hosts: local
  vars:
    qemu_config: "{{ lookup('file', 'qemu-config.yml') | from_yaml }}"
  tasks:
    - name: get ips for inventory hostnames
      include_tasks: 'get-ips.yml'
      loop_control:
        index_var: i
      loop: '{{ qemu_config }}'

    - name: copy ip4 adress to qemu config file
      copy:
        content: '{{ qemu_config | to_nice_yaml }}'
        dest: 'qemu-config.yml'

    - name: create ssh config
      template:
        src: 'templates/config.j2'
        dest: '../ssh/config'

# remote tasks to set hostname, add users and keys
- hosts: qemu
  tasks:
    - name: include os specific vars
      include_vars: '{{ item }}'
      with_first_found:
        - '{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_os_family }}.yml'

    - name: remote user information message
      debug:
        msg: 'Running tasks on remote host as user "{{ ansible_user }}"'

    - name: set hostname
      command: 'hostnamectl set-hostname {{ inventory_hostname }}'
      register: hostname_update
      become: yes

    - name: restart network to register hostname with dns server
      service:
        name: network
        state: restarted
      when: hostname_update.changed
      ignore_errors: yes
      become: yes

    - name: restart NetworkManager to register hostname with dns server
      service:
        name: NetworkManager
        state: restarted
      when: hostname_update.changed
      ignore_errors: yes
      become: yes

    - name: set ssh private key
      copy:
        src: '{{ ssh_identity_file }}'
        dest: '{{ ansible_env.HOME }}/.ssh/id_rsa'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0600'

    - block:
      - name: add additional users
        user:
          name: '{{ item.name }}'
          shell: /bin/bash
          groups: '{{ item.additional_groups }}'
          append: yes
        loop: '{{ additional_users }}'
        become: yes

      - name: generate additional users ssh keys
        user:
          name: '{{ item.name }}'
          generate_ssh_key: '{{ item.generate_ssh_key }}'
        loop: '{{ additional_users }}'
        when: item.generate_ssh_key | default(false, true) and not item.ssh_key | default(false, true)
        become: yes

      - name: ensure ssh directory for additional users exists
        file:
          path: '/home/{{ item.name }}/.ssh'
          state: directory
          mode: '0700'
        loop: '{{ additional_users }}'
        become: yes

      - name: set additional users ssh keys from existing key
        copy:
          src: '{{ item.ssh_key }}'
          dest: '/home/{{ item.name }}/.ssh/id_rsa'
          owner: '{{ item.name }}'
          group: '{{ item.name }}'
          mode: '0600'
        loop: '{{ additional_users }}'
        when: item.ssh_key | default(false, true) and not item.generate_ssh_key | default(false, true)
        become: yes

      - name: set authorized key for user
        authorized_key:
          user: '{{ item.name }}'
          state: present
          key: '{{ lookup("file", item.authorized_key) }}'
        loop: '{{ additional_users }}'
        when: item.authorized_key | default(false, true)
        become: yes
      when: additional_users | default(false, true)
      # endblock add additional users

    - name: set passwordless login
      lineinfile:
        path: '/etc/sudoers'
        state: present
        regexp: '^%{{ sudo_group }}'
        line: '%{{ sudo_group }} ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
      when: ssh_passwordless_login | default(false, true)
      become: yes

    - block:
      - name: disable ipv4 localhost resolver
        replace:
          path: '{{ item.file }}'
          regexp: '^127\.0\.0\.1 {{ item.fqdn }}(.*)$'
          replace: '#127.0.0.1 {{ item.fqdn }}\1'
        loop: '{{ host_files }}'

      - name: disable ipv6 localhost resolver
        replace:
          path: '{{ item.file }}'
          regexp: '^::1 {{ item.fqdn }}(.*)$'
          replace: '#::1 {{ item.fqdn }}\1'
        loop: '{{ host_files }}'
      when: cloud_init_disable_localhost_resolver

#    - name: enable serial output
#      lineinfile:
#        path: '/etc/default/grub'
#        state: present
#        regexp: '^GRUB_TERMINAL_OUTPUT=(.*)$'
#        line: 'GRUB_TERMINAL_OUTPUT="console serial"'
#    - name: enable serial input
#      lineinfile:
#        path: '/etc/default/grub'
#        state: present
#        regexp: '^GRUB_TERMINAL_INPUT=(.*)$'
#        line: 'GRUB_TERMINAL_INPUT="console serial"'
#    - name: set grub serial command
#      lineinfile:
#        path: '/etc/default/grub'
#        state: present
#        regexp: '^GRUB_SERIAL_COMMAND=(.*)$'
#        line: 'GRUB_SERIAL_COMMAND="serial --unit=0 --speed=115200"'

#- name: "Checking GRUB cmdline"
#  shell: "grep 'GRUB_CMDLINE_LINUX_DEFAULT=.*splash.*' /etc/default/grub"
#  register: grub_cfg_grep
#  changed_when: false
#  failed_when: false
#
#- name: "Configuring GRUB cmdline"
#  replace:
#    path: '/etc/default/grub'
#    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="((\w.?)*)"$'
#    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 splash"'
#  when: '"splash" not in grub_cfg_grep'

    - name: check grub cmdline parameters
      shell: "grep GRUB_CMDLINE_LINUX /etc/default/grub | awk -F '\"' '{print $2}'"
      register: grub_cmdline_linux

    - debug: var=grub_cmdline_linux.stdout.split()

    - set_fact:
        grub_cmdline_linux_replace: '{{ grub_cmdline_linux + [item] }}'
      loop:
        - 'console=tty0'
        - 'console=ttyS0,115200'

    - name: ensure grub kernel console parameter
      replace:
        path: '/etc/default/grub'
        regexp: '^GRUB_CMDLINE_LINUX="(.*)"$'
        replace: 'GRUB_CMDLINE_LINUX="{{ grub_cmdline_linux_replace | unique | join }}"'
#    - name: ensure grub kernel serial parameter
#      replace:
#        path: '/etc/default/grub'
#        regexp: '^GRUB_CMDLINE_LINUX="(.*)"$'
#        replace: 'GRUB_CMDLINE_LINUX="\1 console=ttyS0,115200"'


#when: ansible_os_family == "RedHat"
